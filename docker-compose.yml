version: '3'
services:
  db:
    image: "postgres"
    networks:
      - backend
    ports:
      - "5432:5432"
    env_file:
      - database.env
    volumes:
      - database-data:/var/lib/postgresql/data/

  migration:
    depends_on:
      - db
    environment:
      - NODE_ENV=staging
      - POSTGRES_TEST_DB_STRING=postgres://postgres:password@db:5432/car_db_test
      - POSTGRES_DEV_DB_STRING=postgres://postgres:password@db:5432/car_db
    build:
      context: ./car-service
      dockerfile: Dockerfile
    networks:
      - backend
    command: npm run prepdb

  car-service:
    depends_on:
      - db
    environment:
      - NODE_ENV=staging
      - POSTGRES_TEST_DB_STRING=postgres://postgres:password@db:5432/car_db_test
      - POSTGRES_DEV_DB_STRING=postgres://postgres:password@db:5432/car_db
    # image: 'samcart/car-service:latest'
    build:
      context: ./car-service
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
      - "3000:3000"

  # comment out `api-client` below to use the `db` and `car-service` for development
  # and run the api-client locally using `npm run dev`
  api-client:
    depends_on:
      - db
      - car-service
    # image: "samcart/api-client:latest"
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=staging
      - CAR_SERVICE_URL=http://car-service:3000/v1/cars
    networks:
      - backend
    ports:
      - "8080:8080"

# TODO: in production, there might be another container to host nginx which sits in front of the the
# api-client. Requests would be handled by nginx and reverse proxy to the relevant services or static files

networks:
  backend:

volumes:
  database-data: # named volumes can be managed easier using docker-compose

